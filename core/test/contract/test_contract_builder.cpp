#include <iostream>
#include <filesystem>
#include <algorithm>
#include <vector>

#define CATCH_CONFIG_RUNNER
#include "catch/catch.hpp"

#include "util/translation.h"
#include "config.hpp"
#include "nodehelper.hpp"
#include "chain_api.hpp"
#include "wallet_api.hpp"
#include "channel_keys.hpp"
#include "exechelper.hpp"
#include "inscription.hpp"

#include "policy/policy.h"

#include "test_case_wrapper.hpp"

using namespace l15;
using namespace l15::core;
using namespace l15::utxord;

const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;


std::unique_ptr<TestcaseWrapper> w;


int main(int argc, char* argv[])
{
    std::string configpath;
    Catch::Session session;


    // Build a new parser on top of Catch's
    using namespace Catch::clara;
    auto cli
            = session.cli() // Get Catch's composite command line parser
              | Opt(configpath, "Config path") // bind variable to a new option, with a hint string
              ["--config"]    // the option names it will respond to
                      ("Path to L15 config");

    session.cli(cli);

    // Let Catch (using Clara) parse the command line
    int returnCode = session.applyCommandLine(argc, argv);
    if(returnCode != 0) // Indicates a command line error
        return returnCode;

//    if(configpath.empty())
//    {
//        std::cerr << "Bitcoin config is not passed!" << std::endl;
//        return 1;
//    }
//
//    std::filesystem::path p(configpath);
//    if(p.is_relative())
//    {
//        configpath = (std::filesystem::current_path() / p).string();
//    }
//
//    w = std::make_unique<TestcaseWrapper>(configpath);

    return session.run();
}

TEST_CASE("svgscript")
{
    std::string raw_tx ="02000000000103d7c0da6cf9f8c338d9066502ba68826bca8a23a3db9b9dc2dd099cc22069195f0000000000ffffffffe85634756abcc7b86e05842a2558feb2b74e8c76f5647e6e55ea99a3a22b08070000000000ffffffffd7c0da6cf9f8c338d9066502ba68826bca8a23a3db9b9dc2dd099cc22069195f0100000000ffffffff02b80b000000000000225120710a783cda4379b04320faa434c4cd22b379f926ba2f3a9459c070c3e41f5570b00f000000000000225120b0400e3a141f65a94e16a3c5be17949e82fe37136b6d1505389a063b07a8fb5e034065089e2582831c5143cca03fd053f179792a3e7c0e9708d72f08389a8b60796d03e474b8671057806e322c5bb8370617e023ea04b805a63f693dfa81268a388ffddc0620c23bcccb3a1829c5a637ac505c02ba5f1d7b221d155f9942196b0ff74ded2bb8ac0063036f726401010d696d6167652f7376672b786d6c004d08023c7376672077696474683d22313822206865696768743d223136222076696577426f783d22302030203138203136222066696c6c3d226e6f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e0a3c706174682066696c6c2d72756c653d226576656e6f64642220636c69702d72756c653d226576656e6f64642220643d224d352e303431363720312e373439363743332e333230393220312e373439363720312e393136363720332e313535323820312e393136363720342e393030373243312e393136363720362e3030393320322e353637303920372e313532363320332e353933333620382e333430323243352e32363534352031302e3237353120372e32303136332031322e3239373120392031332e393536394331302e373938342031322e323937312031322e373334352031302e323735312031342e3430363620382e33343032324331352e3433323920372e31353236332031362e3038333320362e303039332031362e3038333320342e39303037324331362e3038333320332e31353532382031342e3637393120312e37343936372031322e3935383320312e37343936374331322e3231343820312e37343936372031312e3533333520322e30313034362031302e3939363420322e34343738384331302e3432393820322e39303934332031302e31333220332e32343130334d080220392e393636343820332e343434323443392e393233373720332e343936363820392e383837373520332e353433313820392e383534373920332e353836323843392e383439303520332e353933373820392e383432383620332e3630313920392e383336333820332e3631303443392e383130353620332e363434323920392e373739393820332e363834343120392e373533373620332e373137303743392e373235343520332e373532333220392e363631343320332e383331353320392e353734393720332e393033373243392e343837383420332e393736343720392e323739363520342e3132353520382e393734333720342e3131393543382e363732373820342e313133353720382e343732333920332e3935393720382e333931343220332e383838363743382e333039323220332e383136353620382e32343820332e373338323520382e323230383220332e373033323943382e313737353620332e363437363620382e313534353220332e363136313320382e313332373720332e353836333943382e3130343820332e353438313320382e303738393820332e353132383120382e303135303720332e343332393143372e383534313220332e323331363920372e353632353720322e3930333220372e303033353720322e343437383843362e343636353420322e303130343620352e373835313620312e3734393637204d0802352e303431363720312e37343936375a4d302e323520342e393030373243302e323520322e323435313320322e333930313620302e3038333030373820352e303431363720302e3038333030373843362e313833343820302e3038333030373820372e323333343820302e34383535373520382e303536313320312e313535363443382e343639353820312e3439323420382e373731383320312e373831383920382e393937363420322e303233373243392e3232343920312e373833303520392e353238383120312e343933373220392e393433383720312e31353536344331302e3736363520302e3438353537352031312e3831363520302e303833303037382031322e3935383320302e303833303037384331352e3630393820302e303833303037382031372e373520322e32343531332031372e373520342e39303037324331372e373520362e36333639322031362e3735333320382e31373336362031352e3636373720392e34323939364331332e383730312031312e353130312031312e373730352031332e3639333120392e38333730382031352e3435303243392e33363231382031352e3838313920382e36333738322031352e3838313920382e31363239322031352e3435303243362e32323934382031332e3639333120342e31323938382031312e3531303120322e333332333220392e343239393643312e32343636373b20382e313733363620302e323520362e363336393220302e323520342e39303037325a222066696c6c3d22626c61636b222f3e0a3c2f7376673e0a0102423037303832626132613339396561353536653765363466353736386334656237623266653538323532613834303536656238633762633661373533343536653869306821c1b9a1c51c78599e5e91c8706b4fa6a0ac38a6cc94f1b9d965b0e6976352aef577014021810f8835d636ed2cb0dc686a25617994d1d765c5659538d978955a66ba7a574fcf0f66699b095b069d74b7e6aa2bd9f24a14c7cecb868bc4882415bc8be07501408b5fe2e36519eaa13207cf02a22737a92d25f7a6d559b4b701ae3cd0ea7ea59ba1258f133462a07e782093593046897bdd1462fc99356a5525101c5322b0034f00000000";

    Inscription inscription(raw_tx);

    std::clog << inscription.GetContent() << std::endl;
    std::clog << "===========================================================\n"
              << inscription.GetCollectionId() << std::endl;
}

TEST_CASE("parse")
{
    std::string raw_tx ="010000000001014f414ef59996cf68d0f7952a89241d7aebd99aa53c474cfb31d7b9d8350fcfc10000000000fdffffff01102700000000000022512032cc8b416c04cf857bc8eb891da2403816d3e12e26a0b51e7780ef362fb4c673034065eba88bc56b942a25f0d92fb59cda2fc378be37afb62a66273903a2459de93626466a50a454ff240f390814fb5872ca27c3f181aede6b6092949048ac5d0641fdef01204635b7b5fdc55b8c072892447bfbf9893f81d937f0c2d41e73f1d400cdfd38d6ac0063036f7264010109696d6167652f706e67004db60189504e470d0a1a0a0000000d494844520000002a0000002c0403000000e1b4377500000015504c5445ff9000c2a633edc348000000fbeeca9c7b33ffffff7024a5bc00000028655849664d4d002a000000080001010d00020000000e0000001a000000006464646f6f6f6767676765656500a8076e270000012849444154789c7dd3ed9184200c066067a8c0a18320ff95d7b500a5023d1bb8ebbf874bc2c7e2ea1dc3cc8e8f21b03174ddbfc300186f36f57d6faf6ec464d8960b32bf11fc585ea0ae9718a791fc6e6cd6db4334b89ac368d4ceefac971563ab0e088d6a824032546ddd2b2191ee39662d487eca2abf01a1519bd4ba9f6f72b86ba06519e27ad1c8610b8618fd9154369ba32665a5231d4275c32cf6a0f1a611f1496925653aa736365090c4e5cf6919220112bc5e94f2c96a21f4f3d6eaa8dabf34157d1f8893e6bcb90efdeb6b1b30f3ac0afdb638ce8327497950d40b39724459793b3e99733a45b5d70c3e3435e64d739b5e3437ab816adc78b296ce96ca388f174fe232d5f60fe4e9dc65baf725406912c6dad5c2ea6c0deab54ae37a899eb07bbe851fe31723a762c2083a61870000000049454e44ae4260826821c14635b7b5fdc55b8c072892447bfbf9893f81d937f0c2d41e73f1d400cdfd38d600000000";

    Inscription inscription(raw_tx);

    std::clog << inscription.GetIscriptionId() << std::endl;
    std::clog << inscription.GetContentType() << std::endl;
    std::clog << inscription.GetContent() << std::endl;
    std::clog << "===========================================================\n"
              << "collection: " << inscription.GetCollectionId() << std::endl;
}


TEST_CASE("Fee")
{
    CMutableTransaction tx;

    CAmount base_fee = CalculateTxFee(1000, tx);

    std::clog << "Base tx vsize (no vin/vout): " << base_fee << std::endl;

    tx.vin.emplace_back(uint256(), 0);
    tx.vin.back().scriptWitness.stack.emplace_back(64);
    tx.vout.emplace_back(0, CScript() << 1 << xonly_pubkey());

    CAmount min_fee = CalculateTxFee(1000, tx);

    std::clog << "Mininal taproot tx vsize: " << min_fee << std::endl;

    tx.vin.emplace_back(uint256(), 0);
    tx.vin.back().scriptWitness.stack.emplace_back(64);

    CAmount double_vin_fee = CalculateTxFee(1000, tx);
    std::clog << "Key spend path taproot vin vsize: " << (double_vin_fee - min_fee) << std::endl;

    tx.vout.emplace_back(0, CScript() << 1 << xonly_pubkey());

    CAmount double_vout_fee = CalculateTxFee(1000, tx);
    std::clog << "Taproot vout vsize: " << (double_vout_fee - double_vin_fee) << std::endl;

}

