

[Prefix="std::"]
interface string
{
    void string([Const] DOMString str);
    [Const] DOMString c_str();
};

[Prefix="l15::wasm::"]
interface ChannelKeys
{
    static void InitSecp256k1();

    void ChannelKeys();
    void ChannelKeys([Const] DOMString sk);
    [Value] string GetLocalPrivKey();
    [Value] string GetLocalPubKey();
    [Value] string SignSchnorr([Const] DOMString m);
};

[Prefix="l15::wasm::"]
interface Exception
{
    [Value] static string getMessage(any e);
};

[Prefix="l15::utxord::"]
interface CreateInscriptionBuilder
{
    void CreateInscriptionBuilder([Const] DOMString ord_amount);
    [Ref] CreateInscriptionBuilder MiningFeeRate([Const] DOMString rate);
    [Ref] CreateInscriptionBuilder AddUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString pubkey);
    [Ref] CreateInscriptionBuilder Data([Const] DOMString content_type, [Const] DOMString hex_data);
    [Ref] CreateInscriptionBuilder DestinationPubKey([Const] DOMString pk);
    [Ref] CreateInscriptionBuilder AddToCollection([Const] DOMString collection_id, [Const] DOMString txid, long nout, [Const] DOMString amount);

    void SignCommit(long n, [Const] DOMString sk, [Const] DOMString script_pubkey);
    void SignCollection([Const] DOMString sk);
    void SignInscription([Const] DOMString script_sk);

    [Value] string Serialize();

    [Value] string getIntermediateTaprootSK();

    [Value] string GetMinFundingAmount();
};

enum SwapPhase
{
    "ORD_TERMS",
    "FUNDS_TERMS",
    "FUNDS_COMMIT_SIG",
    "MARKET_PAYOFF_TERMS",
    "MARKET_PAYOFF_SIG",
    "ORD_SWAP_SIG",
    "FUNDS_SWAP_SIG",
    "MARKET_SWAP_SIG",
};

[Prefix="l15::utxord::"]
interface SwapInscriptionBuilder
{
    void SwapInscriptionBuilder([Const] DOMString ord_price, [Const] DOMString market_fee);

    [Ref] SwapInscriptionBuilder OrdUTXO([Const] DOMString txid, long nout, [Const] DOMString amount);
    [Ref] SwapInscriptionBuilder AddFundsUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString pubkey);

    [Ref] SwapInscriptionBuilder SwapScriptPubKeyA([Const] DOMString v);
    [Ref] SwapInscriptionBuilder SwapScriptPubKeyB([Const] DOMString v);

    void SignOrdSwap([Const] DOMString sk);

    void SignFundsCommitment(long funds_index, [Const] DOMString sk);
    void SignFundsSwap([Const] DOMString sk);
    void SignFundsPayBack([Const] DOMString sk);

    void CheckContractTerms(SwapPhase phase);
    [Value] string Serialize(SwapPhase phase);
    void Deserialize([Const] DOMString data);

    [Value] string GetMinFundingAmount();
};