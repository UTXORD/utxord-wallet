

[Prefix="std::"]
interface string
{
    void string([Const] DOMString str);
    [Const] DOMString c_str();
};

[Prefix="utxord::"]
interface ChannelKeys
{
    static void InitSecp256k1();

    void ChannelKeys();
    void ChannelKeys([Const] DOMString sk);
    [Value] string GetLocalPrivKey();
    [Value] string GetLocalPubKey();
    [Value] string SignSchnorr([Const] DOMString m);
};


[Prefix="utxord::"]
interface MasterKey
{
    void MasterKey([Const] DOMString seed);
    ChannelKeys Derive([Const] DOMString path, boolean for_script);
};


enum NetworkMode
{
    "REGTEST",
    "TESTNET",
    "MAINNET"
};


[Prefix="utxord::"]
interface Bech32
{
    void Bech32(NetworkMode network);
    [Value] string Encode([Const] DOMString pk);
    [Value] string Decode([Const] DOMString addr);
};


[Prefix="utxord::"]
interface Exception
{
    [Value] static string getMessage(any e);
};


enum InscribeType
{
    "INSCRIPTION",
    "COLLECTION"
};

[Prefix="utxord::"]
interface CreateInscriptionBuilder
{
    void CreateInscriptionBuilder(InscribeType type, [Const] DOMString ordAmount);
    [Ref] CreateInscriptionBuilder MiningFeeRate([Const] DOMString rate);
    [Ref] CreateInscriptionBuilder AddUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString pk);
    [Ref] CreateInscriptionBuilder Data([Const] DOMString contentType, [Const] DOMString hexData);
    [Ref] CreateInscriptionBuilder InscribePubKey([Const] DOMString inscribePK);
    [Ref] CreateInscriptionBuilder ChangePubKey([Const] DOMString changePK);

    [Ref] CreateInscriptionBuilder AddToCollection([Const] DOMString collectionId, [Const] DOMString txid, long nout, [Const] DOMString amount,
                                                   [Const] DOMString collectionPK);
    [Ref] CreateInscriptionBuilder SetMetaData([Const] DOMString rate);
    [Ref] CreateInscriptionBuilder AddFundMiningFee([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString fundMiningFeePK);

    void SignCommit(long n, [Const] DOMString sk, [Const] DOMString scriptPK);
    void SignInscription([Const] DOMString scriptSK);
    void SignCollection([Const] DOMString collectionScriptSK);
    void SignFundMiningFee(long n, [Const] DOMString sk);

    [Value] string Serialize(long ver);

    long TransactionCount();
    [Value] string RawTransaction(long n);

    [Const] static DOMString SupportedVersions();

    [Value] string getIntermediateTaprootSK();
    [Value] string MakeInscriptionId();

    [Value] string GetMinFundingAmount([Const] DOMString params);
    [Value] string GetGenesisTxMiningFee();

    [Value] string GetNewInputMiningFee();
    [Value] string GetNewOutputMiningFee();

    [Value] string GetInscriptionLocation();
    [Value] string GetCollectionLocation();
    [Value] string GetChangeLocation();
};

enum SwapPhase
{
    "ORD_TERMS",
    "FUNDS_TERMS",
    "FUNDS_COMMIT_SIG",
    "MARKET_PAYOFF_TERMS",
    "MARKET_PAYOFF_SIG",
    "ORD_SWAP_SIG",
    "FUNDS_SWAP_SIG",
    "MARKET_SWAP_SIG",
};

[Prefix="utxord::"]
interface SwapInscriptionBuilder
{
    void SwapInscriptionBuilder([Const] DOMString ord_price, [Const] DOMString market_fee);

    [Ref] SwapInscriptionBuilder OrdUTXO([Const] DOMString txid, long nout, [Const] DOMString amount);
    [Ref] SwapInscriptionBuilder AddFundsUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString pubkey);

    [Ref] SwapInscriptionBuilder SwapScriptPubKeyA([Const] DOMString v);
    [Ref] SwapInscriptionBuilder SwapScriptPubKeyB([Const] DOMString v);

    void SignOrdSwap([Const] DOMString sk);

    void SignFundsCommitment(long funds_index, [Const] DOMString sk);
    void SignFundsSwap([Const] DOMString sk);
    void SignFundsPayBack([Const] DOMString sk);

    void CheckContractTerms(SwapPhase phase);
    [Value] string Serialize(long ver, SwapPhase phase);
    void Deserialize([Const] DOMString data);

    long TransactionCount(SwapPhase phase);
    [Value] string RawTransaction(SwapPhase phase, long n);

    [Const] static DOMString SupportedVersions();

    [Value] string GetMinFundingAmount([Const] DOMString params);
    [Value] string GetNewInputMiningFee();
    [Value] string GetNewOutputMiningFee();
};