

[Prefix="std::"]
interface string
{
    void string([Const] DOMString str);
    [Const] DOMString c_str();
};

enum ChainMode
{
    "MAINNET",
    "TESTNET",
    "REGTEST"
};

enum Bech32Encoding
{
    "BECH32",
    "BECH32M"
};

[Prefix="utxord::wasm::"]
interface Bech32
{
    void Bech32(ChainMode mode);
    [Const] DOMString Encode([Const] DOMString value, Bech32Encoding encoding);
};

[Prefix="utxord::wasm::"]
interface KeyPair
{
    static void InitSecp256k1();

    void KeyPair([Const] DOMString sk);
    [Const] DOMString PrivKey();
    [Const] DOMString PubKey();
    [Const] DOMString SignSchnorr([Const] DOMString m);

    [Const] DOMString GetP2TRAddress(ChainMode mode);
    [Const] DOMString GetP2WPKHAddress(ChainMode mode);
};


[Prefix="utxord::wasm::"]
interface KeyRegistry
{
    void KeyRegistry(ChainMode mode, [Const] DOMString seed);

    void AddKeyType([Const] DOMString name, [Const] DOMString filter_json);
    void RemoveKeyType([Const] DOMString name);

    void AddKeyToCache([Const] DOMString sk);
    void RemoveKeyFromCache([Const] DOMString sk);
    void RemoveKeyFromCacheByAddress([Const] DOMString addr);

    KeyPair Derive([Const] DOMString path, boolean for_script);

    KeyPair LookupPubKey([Const] DOMString pubkey, [Const] DOMString opt);
    KeyPair LookupAddress([Const] DOMString address, [Const] DOMString opt);
};

[Prefix="utxord::wasm::"]
interface Exception
{
    [Const] static DOMString getMessage(any e);
};

[Prefix="utxord::wasm::"]
interface IContractDestination
{
    void SetAmount([Const] DOMString amount);
    [Value] string Amount();
    [Value] string Address();
};

[Prefix="utxord::wasm::"]
interface P2WPKH
{
    void P2WPKH(ChainMode mode, [Const] DOMString amount, [Const] DOMString address);
    void SetAmount([Const] DOMString amount);
    [Value] string Amount();
    [Value] string Address();
};

[Prefix="utxord::wasm::"]
interface P2TR
{
    void P2TR(ChainMode mode, [Const] DOMString amount, [Const] DOMString address);
    void SetAmount([Const] DOMString amount);
    [Value] string Amount();
    [Value] string Address();
};

[Prefix="utxord::wasm::"]
interface IContractOutput
{
    [Value] string TxID();
    unsigned long NOut();
    IContractDestination Destination();
};

[Prefix="utxord::wasm::"]
interface UTXO : IContractOutput
{
    void UTXO(ChainMode mode, [Const] DOMString txid, unsigned long nout, [Const] DOMString amount, [Const] DOMString addr);
};



enum InscribeType
{
    "INSCRIPTION",
    "LASY_INSCRIPTION",
    "COLLECTION"
};

enum InscribePhase
{
    "MARKET_TERMS",
    "LASY_COLLECTION_MARKET_TERMS",
    "LASY_COLLECTION_INSCRIPTION_SIGNATURE",
    "INSCRIPTION_SIGNATURE"
};

[Prefix="utxord::wasm::"]
interface CreateInscriptionBuilder
{
    void CreateInscriptionBuilder(ChainMode mode, InscribeType type);
    void MarketFee([Const] DOMString amount, [Const] DOMString addr);
    void OrdAmount([Const] DOMString amount);
    void MiningFeeRate([Const] DOMString rate);
    void AddUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);
    void Data([Const] DOMString contentType, [Const] DOMString hexData);
    void MetaData([Const] DOMString hexCborData);
    void InscribeAddress([Const] DOMString inscriptionAddr);
    void ChangeAddress([Const] DOMString changeAddr);

    void AddToCollection([Const] DOMString collectionId, [Const] DOMString txid, long nout, [Const] DOMString amount,
                                                   [Const] DOMString collectionAddr);
    void FundMiningFee([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString fundMiningFeeAddr);

    void SignCommit(KeyRegistry keyRegistry, [Const] DOMString key_filter, [Const] DOMString scriptPK);
    void SignInscription(KeyRegistry keyRegistry, [Const] DOMString script_key_filter);
    void SignCollection(KeyRegistry keyRegistry, [Const] DOMString key_filter);
    //void SignFundMiningFee(KeyRegistry keyRegistry, [Const] DOMString key_filter);

    [Value] string Serialize(long ver, InscribePhase phase);
    void Deserialize([Const] DOMString data, InscribePhase phase);

    long TransactionCount();
    [Value] string RawTransaction(long n);

    [Const] static DOMString SupportedVersions();

    [Value] string getIntermediateTaprootSK();
    [Value] string MakeInscriptionId();

    [Value] string GetMinFundingAmount([Const] DOMString params);
    [Value] string GetGenesisTxMiningFee();

    [Value] string GetNewInputMiningFee();
    [Value] string GetNewOutputMiningFee();
};

enum SwapPhase
{
    "ORD_TERMS",
    "FUNDS_TERMS",
    "FUNDS_COMMIT_SIG",
    "MARKET_PAYOFF_TERMS",
    "MARKET_PAYOFF_SIG",
    "ORD_SWAP_SIG",
    "FUNDS_SWAP_SIG",
    "MARKET_SWAP_SIG",
};

[Prefix="utxord::wasm::"]
interface SwapInscriptionBuilder
{
    void SwapInscriptionBuilder(ChainMode mode);

    void OrdPrice([Const] DOMString price);
    void MarketFee([Const] DOMString amount, [Const] DOMString addr);

    void OrdUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);
    void AddFundsUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);

    void ChangeAddress([Const] DOMString changeAddr);

    void OrdPayoffAddress([Const] DOMString addr);
    void FundsPayoffAddress([Const] DOMString addr);

    void SwapScriptPubKeyB([Const] DOMString v);

    void SignOrdSwap(KeyRegistry keyRegistry, [Const] DOMString key_filter);

    void SignFundsCommitment(KeyRegistry keyRegistry, [Const] DOMString key_filter);
    void SignFundsSwap(KeyRegistry keyRegistry, [Const] DOMString key_filter);
    void SignFundsPayBack(KeyRegistry keyRegistry, [Const] DOMString key_filter);

    void CheckContractTerms(SwapPhase phase);
    [Value] string Serialize(long ver, SwapPhase phase);
    void Deserialize([Const] DOMString data);

    long TransactionCount(SwapPhase phase);
    [Value] string RawTransaction(SwapPhase phase, long n);

    [Const] static DOMString SupportedVersions();

    [Value] string GetMinFundingAmount([Const] DOMString params);
    [Value] string GetNewInputMiningFee();
    [Value] string GetNewOutputMiningFee();
};


[Prefix="utxord::wasm::"]
interface SimpleTransaction
{
    void SimpleTransaction(ChainMode mode);

    [Value] string TxID();
    unsigned long NOut();
    IContractDestination Destination();

    void MiningFeeRate([Const] DOMString rate);
    [Value] string GetMinFundingAmount();

    void AddInput(IContractOutput prevout);
    void AddOutput(IContractDestination out);
    void AddChangeOutput([Const] DOMString pk);

    void Sign([Const] KeyRegistry master, [Const] DOMString key_filter);

    [Const] DOMString Serialize();
    void Deserialize([Const] DOMString data);
};
