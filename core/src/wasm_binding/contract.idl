

[Prefix="std::"]
interface string
{
    void string([Const] DOMString str);
    [Const] DOMString c_str();
};

[Prefix="utxord::"]
interface ChannelKeys
{
    static void InitSecp256k1();

    void ChannelKeys();
    void ChannelKeys([Const] DOMString sk);
    [Value] string GetLocalPrivKey();
    [Value] string GetLocalPubKey();
    [Value] string SignSchnorr([Const] DOMString m);
};


[Prefix="utxord::"]
interface MasterKey
{
    void MasterKey([Const] DOMString seed);
    ChannelKeys Derive([Const] DOMString path, boolean for_script);
};


enum NetworkMode
{
    "REGTEST",
    "TESTNET",
    "MAINNET"
};


[Prefix="utxord::"]
interface Bech32
{
    void Bech32(NetworkMode network);
    [Value] string Encode([Const] DOMString pk);
    [Value] string Decode([Const] DOMString addr);
};


[Prefix="utxord::"]
interface Exception
{
    [Value] static string getMessage(any e);
};

[Prefix="utxord::"]
interface IContractDestination
{
    [Value] string Amount();
    [Value] string DestinationPK();
};

[Prefix="utxord::"]
interface P2TR : IContractDestination
{
    void P2TR([Const] DOMString amount, [Const] DOMString pk);
};

[Prefix="utxord::"]
interface IContractOutput
{
    [Value] string TxID();
    unsigned long NOut();
    IContractDestination Destination();
};

[Prefix="utxord::"]
interface UTXO
{
    void UTXO([Const] DOMString txid, unsigned long nout, [Const] DOMString amount, [Const] DOMString pk);
    [Value] string TxID();
    unsigned long NOut();
    IContractDestination Destination();
};


[Prefix="utxord::"]
interface Collection
{
    [Value] string GetCollectionTapRootPubKey([Const] DOMString collectionId, [Const] DOMString scriptSK, [Const] DOMString internalSK);
};

enum InscribeType
{
    "INSCRIPTION",
    "LASY_INSCRIPTION",
    "COLLECTION"
};

enum InscribePhase
{
    "MARKET_TERMS",
    "LASY_COLLECTION_MARKET_TERMS",
    "LASY_COLLECTION_INSCRIPTION_SIGNATURE",
    "INSCRIPTION_SIGNATURE"
};

[Prefix="utxord::"]
interface CreateInscriptionBuilder
{
    void CreateInscriptionBuilder(InscribeType type);
    void MarketFee([Const] DOMString amount, [Const] DOMString pk);
    void OrdAmount([Const] DOMString amount);
    void MiningFeeRate([Const] DOMString rate);
    void AddUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString pk);
    void Data([Const] DOMString contentType, [Const] DOMString hexData);
    void MetaData([Const] DOMString jsonData);
    void InscribePubKey([Const] DOMString inscribePK);
    void ChangePubKey([Const] DOMString changePK);

    void AddToCollection([Const] DOMString collectionId, [Const] DOMString txid, long nout, [Const] DOMString amount,
                                                   [Const] DOMString collectionPK);
    void FundMiningFee([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString fundMiningFeePK);

    void SignCommit(long n, [Const] DOMString sk, [Const] DOMString scriptPK);
    void SignInscription([Const] DOMString scriptSK);
    void SignCollection([Const] DOMString collectionScriptSK);
    void SignFundMiningFee(long n, [Const] DOMString sk);

    [Value] string Serialize(long ver, InscribePhase phase);
    void Deserialize([Const] DOMString data, InscribePhase phase);

    long TransactionCount();
    [Value] string RawTransaction(long n);

    [Const] static DOMString SupportedVersions();

    [Value] string getIntermediateTaprootSK();
    [Value] string MakeInscriptionId();

    [Value] string GetMinFundingAmount([Const] DOMString params);
    [Value] string GetGenesisTxMiningFee();

    [Value] string GetNewInputMiningFee();
    [Value] string GetNewOutputMiningFee();
};

enum SwapPhase
{
    "ORD_TERMS",
    "FUNDS_TERMS",
    "FUNDS_COMMIT_SIG",
    "MARKET_PAYOFF_TERMS",
    "MARKET_PAYOFF_SIG",
    "ORD_SWAP_SIG",
    "FUNDS_SWAP_SIG",
    "MARKET_SWAP_SIG",
};

[Prefix="utxord::"]
interface SwapInscriptionBuilder
{
    void SwapInscriptionBuilder();

    void OrdPrice([Const] DOMString price);
    void MarketFee([Const] DOMString amount, [Const] DOMString pk);

    void OrdUTXO([Const] DOMString txid, long nout, [Const] DOMString amount);
    void AddFundsUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString pubkey);

    void SwapScriptPubKeyA([Const] DOMString v);
    void SwapScriptPubKeyB([Const] DOMString v);

    void SignOrdSwap([Const] DOMString sk);

    void SignFundsCommitment(long funds_index, [Const] DOMString sk);
    void SignFundsSwap([Const] DOMString sk);
    void SignFundsPayBack([Const] DOMString sk);

    void CheckContractTerms(SwapPhase phase);
    [Value] string Serialize(long ver, SwapPhase phase);
    void Deserialize([Const] DOMString data);

    long TransactionCount();
    [Value] string RawTransaction(long n);

    [Const] static DOMString SupportedVersions();

    [Value] string GetMinFundingAmount([Const] DOMString params);
    [Value] string GetNewInputMiningFee();
    [Value] string GetNewOutputMiningFee();
};


[Prefix="utxord::"]
interface SimpleTransaction
{
    void SimpleTransaction();

    [Value] string TxID();
    unsigned long NOut();
    IContractDestination Destination();

    void MiningFeeRate([Const] DOMString rate);
    [Value] string GetMinFundingAmount();

    void AddInput(IContractOutput prevout);
    void AddOutput(IContractDestination out);
    void AddChangeOutput([Const] DOMString pk);

    void Sign([Const] MasterKey master);

    [Const] DOMString Serialize();
    void Deserialize([Const] DOMString data);
};
