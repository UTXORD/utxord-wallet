

enum ChainMode
{
    "MAINNET",
    "TESTNET",
    "REGTEST"
};

enum Bech32Encoding
{
    "BECH32",
    "BECH32M"
};

[Prefix="utxord::wasm::"]
interface Bech32
{
    void Bech32(ChainMode mode);
    [Const] DOMString Encode([Const] DOMString value, Bech32Encoding encoding);
};

[Prefix="utxord::wasm::"]
interface KeyPair
{
    static void InitSecp256k1();

    void KeyPair([Const] DOMString sk);
    [Const] DOMString PrivKey();
    [Const] DOMString PubKey();
    [Const] DOMString SignSchnorr([Const] DOMString m);

    [Const] DOMString GetP2TRAddress(ChainMode mode);
    [Const] DOMString GetP2WPKHAddress(ChainMode mode);
};

[Prefix="utxord::wasm::"]
interface MnemonicParser
{
    void MnemonicParser([Const] DOMString json_dictionary);
    [Const] DOMString DecodeEntropy([Const] DOMString phrase);
    [Const] DOMString EncodeEntropy([Const] DOMString entropy_hex);
    [Const] DOMString MakeSeed([Const] DOMString phrase, [Const] DOMString passphrase);
};

[Prefix="utxord::wasm::"]
interface KeyRegistry
{
    void KeyRegistry(ChainMode mode, [Const] DOMString seed);

    void AddKeyType([Const] DOMString name, [Const] DOMString filter_json);
    void RemoveKeyType([Const] DOMString name);

    void AddKeyToCache([Const] DOMString sk);
    void RemoveKeyFromCache([Const] DOMString sk);
    void RemoveKeyFromCacheByAddress([Const] DOMString addr);

    KeyPair Derive([Const] DOMString path, boolean for_script);

    KeyPair LookupPubKey([Const] DOMString pubkey, [Const] DOMString opt);
    KeyPair LookupAddress([Const] DOMString address, [Const] DOMString opt);
};

[Prefix="utxord::wasm::"]
interface Exception
{
    [Const] static DOMString getMessage(any e);
};

[Prefix="utxord::wasm::"]
interface IContractDestination
{
    void SetAmount([Const] DOMString amount);
    [Const] DOMString Amount();
    [Const] DOMString Address();
};

[Prefix="utxord::wasm::"]
interface P2WPKH: IContractDestination
{
    void P2WPKH(ChainMode mode, [Const] DOMString amount, [Const] DOMString address);
    void SetAmount([Const] DOMString amount);
    [Const] DOMString Amount();
    [Const] DOMString Address();
};

[Prefix="utxord::wasm::"]
interface P2TR: IContractDestination
{
    void P2TR(ChainMode mode, [Const] DOMString amount, [Const] DOMString address);
    void SetAmount([Const] DOMString amount);
    [Const] DOMString Amount();
    [Const] DOMString Address();
};

[Prefix="utxord::wasm::"]
interface IContractOutput
{
    [Const] DOMString TxID();
    unsigned long NOut();
    [Const] DOMString Amount();
    [Const] DOMString Address();
    [Const] IContractDestination Destination();
};

[Prefix="utxord::wasm::"]
interface UTXO : IContractOutput
{
    void UTXO(ChainMode mode, [Const] DOMString txid, unsigned long nout, [Const] DOMString amount, [Const] DOMString addr);
};


[Prefix="utxord::wasm::"]
interface RuneStoneDestination: IContractDestination
{
    void SetAmount([Const] DOMString amount);
    [Const] DOMString Amount();
    [Const] DOMString Address();
};

[Prefix="utxord::wasm::"]
interface Rune
{
    void Rune([Const] DOMString runeText, [Const] DOMString spece, unsigned long unicodeSymbol);
    void SetMintCap([Const] DOMString v);
    void SetAmountPerMint([Const] DOMString v);
    void SetMintHeightStart([Const] DOMString v);
    void SetMintHeightEnd([Const] DOMString v);
    void SetMintHeightOffsetStart([Const] DOMString v);
    void SetMintHeightOffsetEnd([Const] DOMString v);

    [Const] RuneStoneDestination Etch(ChainMode m);
    [Const] RuneStoneDestination EtchAndMint(ChainMode m, [Const] DOMString amount, unsigned long nout);
    [Const] RuneStoneDestination Mint(ChainMode m, unsigned long nout);
};

enum InscribeType
{
    "INSCRIPTION",
    "LAZY_INSCRIPTION"
};

enum InscribePhase
{
    "MARKET_TERMS",
    "LAZY_INSCRIPTION_MARKET_TERMS",
    "LAZY_INSCRIPTION_SIGNATURE",
    "INSCRIPTION_SIGNATURE"
};

[Prefix="utxord::wasm::"]
interface CreateInscriptionBuilder
{
    void CreateInscriptionBuilder(ChainMode mode, InscribeType type);
    void MarketFee([Const] DOMString amount, [Const] DOMString addr);
    void OrdOutput([Const] DOMString amount, [Const] DOMString inscriptionAddr);
    void OrdOutputDestination([Const] IContractDestination dest);
    void MiningFeeRate([Const] DOMString rate);
    void AddUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);
    void AddInput([Const] IContractOutput prevout);
    void Data([Const] DOMString contentType, [Const] DOMString hexData);
    void Delegate([Const] DOMString inscriptionId);
    void MetaData([Const] DOMString hexCborData);
    void Rune([Const] RuneStoneDestination runeStone);
    void ChangeAddress([Const] DOMString changeAddr);
    void InscribeScriptPubKey([Const] DOMString pk);
    void InscribeInternalPubKey([Const] DOMString pk);
    void FundMiningFeeInternalPubKey([Const] DOMString pk);

    void AddCollectionUTXO([Const] DOMString collectionId, [Const] DOMString txid, unsigned long nout,
                           [Const] DOMString amount, [Const] DOMString collectionAddr);
    void AddCollectionInput([Const] DOMString collectionId, [Const] IContractOutput prevout);

    void SignCommit(KeyRegistry keyRegistry, [Const] DOMString key_filter);
    void SignInscription(KeyRegistry keyRegistry, [Const] DOMString script_key_filter);
    void SignCollection(KeyRegistry keyRegistry, [Const] DOMString key_filter);

    [Const] DOMString Serialize(unsigned long ver, InscribePhase phase);
    void Deserialize([Const] DOMString data, InscribePhase phase);

    unsigned long TransactionCount(InscribePhase phase);
    [Const] DOMString RawTransaction(InscribePhase phase, unsigned long n);

    [Const] static DOMString SupportedVersions();

    [Const] DOMString MakeInscriptionId();

    [Const] DOMString GetTotalMiningFee([Const] DOMString params);
    [Const] DOMString GetMinFundingAmount([Const] DOMString params);
    [Const] DOMString GetNewInputMiningFee();
    [Const] DOMString GetNewOutputMiningFee();

    [Const] IContractOutput InscriptionOutput();
    [Const] IContractOutput CollectionOutput();
    [Const] IContractOutput ChangeOutput();
    [Const] IContractOutput FixedChangeOutput();
};

enum SwapPhase
{
    "ORD_TERMS",
    "FUNDS_TERMS",
    "FUNDS_COMMIT_SIG",
    "MARKET_PAYOFF_TERMS",
    "MARKET_PAYOFF_SIG",
    "ORD_SWAP_SIG",
    "FUNDS_SWAP_SIG",
    "MARKET_SWAP_SIG",
};

[Prefix="utxord::wasm::"]
interface SwapInscriptionBuilder
{
    void SwapInscriptionBuilder(ChainMode mode);

    void OrdPrice([Const] DOMString price);
    void MarketFee([Const] DOMString amount, [Const] DOMString addr);

    void OrdUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);
    void AddFundsUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);

    void ChangeAddress([Const] DOMString changeAddr);

    void OrdPayoffAddress([Const] DOMString addr);
    void FundsPayoffAddress([Const] DOMString addr);

    void SwapScriptPubKeyB([Const] DOMString v);

    void SignOrdSwap(KeyRegistry keyRegistry, [Const] DOMString key_filter);

    void SignFundsCommitment(KeyRegistry keyRegistry, [Const] DOMString key_filter);
    void SignFundsSwap(KeyRegistry keyRegistry, [Const] DOMString key_filter);
    void SignFundsPayBack(KeyRegistry keyRegistry, [Const] DOMString key_filter);

    [Const] DOMString Serialize(long ver, SwapPhase phase);
    void Deserialize([Const] DOMString data, SwapPhase phase);

    unsigned long TransactionCount(SwapPhase phase);
    [Const] DOMString RawTransaction(SwapPhase phase, unsigned long n);

    [Const] static DOMString SupportedVersions();

    [Const] DOMString GetTotalMiningFee([Const] DOMString params);
    [Const] DOMString GetMinFundingAmount([Const] DOMString params);
    [Const] DOMString GetNewInputMiningFee();
    [Const] DOMString GetNewOutputMiningFee();

    [Const] IContractOutput InscriptionOutput();
    [Const] IContractOutput FundsOutput();
    [Const] IContractOutput ChangeOutput();
};


enum TrustlessSwapPhase
{
    "TRUSTLESS_ORD_TERMS",
    "TRUSTLESS_ORD_SWAP_SIG",
    "TRUSTLESS_FUNDS_TERMS",
    "TRUSTLESS_FUNDS_COMMIT_SIG",
    "TRUSTLESS_FUNDS_SWAP_TERMS",
    "TRUSTLESS_FUNDS_SWAP_SIG"
};

[Prefix="utxord::wasm::"]
interface TrustlessSwapInscriptionBuilder
{
    void TrustlessSwapInscriptionBuilder(ChainMode mode);

    void OrdPrice([Const] DOMString price);
    void MarketFee([Const] DOMString amount, [Const] DOMString addr);

    void CommitOrdinal([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);
    void FundCommitOrdinal([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr, [Const] DOMString change_addr);
    void CommitFunds([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);

    void Brick1SwapUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);
    void Brick2SwapUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);
    void AddMainSwapUTXO([Const] DOMString txid, long nout, [Const] DOMString amount, [Const] DOMString addr);

    void ChangeAddress([Const] DOMString changeAddr);

    void OrdPayoffAddress([Const] DOMString addr);
    void FundsPayoffAddress([Const] DOMString addr);

//    void MarketScriptPubKey([Const] DOMString v);

    void OrdScriptPubKey([Const] DOMString v);
    void OrdIntPubKey([Const] DOMString v);

    void SignOrdSwap(KeyRegistry keyRegistry, [Const] DOMString key_filter);
    //void SignMarketSwap(KeyRegistry keyRegistry, [Const] DOMString key_filter);

    void SignOrdCommitment(KeyRegistry keyRegistry, [Const] DOMString key_filter);
    void SignFundsCommitment(KeyRegistry keyRegistry, [Const] DOMString key_filter);
    void SignFundsSwap(KeyRegistry keyRegistry, [Const] DOMString key_filter);

//    void CheckContractTerms(TrustlessSwapPhase phase);
    [Const] DOMString Serialize(unsigned long ver, TrustlessSwapPhase phase);
    void Deserialize([Const] DOMString data, TrustlessSwapPhase phase);

    unsigned long TransactionCount(TrustlessSwapPhase phase);
    [Const] DOMString RawTransaction(TrustlessSwapPhase phase, unsigned long n);

    [Const] static DOMString SupportedVersions();

    [Const] DOMString GetTotalMiningFee([Const] DOMString params);
    [Const] DOMString GetMinFundingAmount([Const] DOMString params);
    [Const] DOMString GetMinSwapFundingAmount();
    [Const] DOMString GetNewInputMiningFee();
    [Const] DOMString GetNewOutputMiningFee();
};

enum TxPhase
{
    "TX_TERMS",
    "TX_SIGNATURE"
};

[Prefix="utxord::wasm::"]
interface SimpleTransaction
{
    void SimpleTransaction(ChainMode mode);

    [Const] DOMString TxID();
    unsigned long CountOutputs();
    [Const] IContractOutput Output(unsigned long n);

    void MiningFeeRate([Const] DOMString rate);

    [Const] DOMString GetTotalMiningFee([Const] DOMString params);
    [Const] DOMString GetMinFundingAmount([Const] DOMString params);
    [Const] DOMString GetNewInputMiningFee();
    [Const] DOMString GetNewOutputMiningFee();

    void AddInput([Const] IContractOutput prevout);
    void AddUTXO([Const] DOMString txid, unsigned long nout, [Const] DOMString amount, [Const] DOMString addr);
    void AddOutput([Const] DOMString amount, [Const] DOMString addr);
    void AddOutputDestination([Const] IContractDestination out);

    void AddRuneInput([Const] IContractOutput prevout, [Const] DOMString rune_id_json, [Const] DOMString rune_amount);
    void AddRuneUTXO([Const] DOMString txid, unsigned long nout, [Const] DOMString amount, [Const] DOMString addr, [Const] DOMString rune_id_json, [Const] DOMString rune_amount);
    void AddRuneOutput([Const] DOMString amount, [Const] DOMString addr, [Const] DOMString rune_id_json, [Const] DOMString rune_amount);
    void AddRuneOutputDestination([Const] IContractDestination out, [Const] DOMString rune_id_json, [Const] DOMString rune_amount);
    void BurnRune([Const] DOMString rune_id_json, [Const] DOMString rune_amount);

    void AddChangeOutput([Const] DOMString pk);

    void Sign([Const] KeyRegistry master, [Const] DOMString key_filter);
    void PartialSign([Const] KeyRegistry master, [Const] DOMString key_filter, unsigned long nin);

    [Const] DOMString Serialize(unsigned long ver, TxPhase phase);
    void Deserialize([Const] DOMString data, TxPhase phase);

    unsigned long TransactionCount(TxPhase phase);
    [Const] DOMString RawTransaction(TxPhase phase, unsigned long n);

    [Const] static DOMString SupportedVersions();
    [Const] IContractOutput ChangeOutput();
    [Const] IContractOutput RuneStoneOutput();
};
